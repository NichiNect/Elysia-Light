import type { ControllerContext } from "elysia"
import { db } from '@/utils/db.utils'
import {{ model }} from '@/models/{{ model }}'

export class {{ name }} {
    // ========================================>
    // ## Display a listing of the resource.
    // ========================================>
    static async index(c: ControllerContext) {
        const record = await {{ model }}.query(){{ with }}
            .apply({{ model }}.search(c.getQuery.search, ['name']))
            .apply({{ model }}.filter(JSON.parse(c.getQuery.filter)))
            .apply({{ model }}.selectableColumns())
            .orderBy(c.getQuery.sortBy, c.getQuery.sortDirection)
            .paginate(1,c.getQuery.paginate)
        
        c.responseData(record.items().toJSON(), record.total())
    }


    // =============================================>
    // ## Store a newly created resource.
    // =============================================>
    static async store(c: ControllerContext) {
        c.validation({{{ validations }}})

        const trx = await db.beginTransaction()
        
        const record = new {{ model }}().dumpField(c.body as Record<string, any>)

        try {
            await record.save({ trx })            
        } catch (err) {
            await trx.rollback()
            c.responseError(err as Error, "Create {{ model }}")
        }

        await trx.commit()
        c.responseSaved(record.toJSON())
    }


    // ============================================>
    // ## Update the specified resource.
    // ============================================>
    static async update(c: ControllerContext) {
        const record = await {{ model }}.query().apply({{ model }}.findOrNotFound(c.params.id))

        c.validation({{{ validations }}})
        
        const trx = await db.beginTransaction()
        
        record.dumpField(c.body as Record<string, any>)

        try {
            await record.save({ trx })
        } catch (err) {
            await trx.rollback()
            c.responseError(err as Error, "Create {{ model }}")
        }
        
        await trx.commit()
        c.responseSaved(record.toJSON())
    }


    // ===============================================>
    // ## Remove the specified resource.
    // ===============================================>
    static async destroy(c: ControllerContext) {
        const record = await {{ model }}.query().apply({{ model }}.findOrNotFound(c.params.id))
        
        try {
            await record.delete()
        } catch (err) {
            c.responseError(err as Error, "Delete {{ model }}")
        }

        c.responseSuccess(record.toJSON())
    }
}